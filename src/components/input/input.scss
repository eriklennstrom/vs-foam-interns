@use "sass:color";
@use "@/styles/colors.scss";
@use "@/styles/variables.scss";

* {
  margin: 0;
}

.toggledAccordian{
  transform: rotate(180deg);
  transition: transform;
}

.topWrapper{
  margin-top: 10px;
}

h2 {
  display: flex;
  font-family: variables.$primaryFontFamily;
  font-weight: 400;
  font-size: 21px;
  color: colors.$primary-300
}
.dropdown{
  height:14px;
  width:14px;
  align-self: center;
  justify-self: center;
  rotate:180deg;
}

.inputWrapper {
  width: fit-content;
  display: flex;
  align-items: center;
  border: 1px solid black;
  border-radius: 4px;
 width: 100%;
}



.warningIcon{
  margin-right:10px;
}

.successIcon{
  margin-right:10px;
}

.valid {
  border-color: colors.$success;
}

.invalid {
  border-color: colors.$danger;
}

.disabled{
  opacity: 0.3;

}


.userInstructions {
  font-size: 14px;
  padding: 1px;
  margin-right: 10px;

  .successMessageText {
    color: colors.$success;
  }
  .errorMessageText {
    color: colors.$danger;
  }
}

.passwordControls{
margin-right: 10px;
}


input::placeholder {
  opacity: 0.3;
}

input{
  margin-left: 10px;
  width:100%;
  border:0;
  outline:0;
  background: transparent;
  font-size: 22px;
  padding:10px;
}


@each $name,
$bg in colors.$input-colors {
  .input--#{$name} {


    all: unset;
    cursor: pointer;
    user-select: none;

    ///TEXT FORMATTING
    color: map-get(colors.$text-colors, strong-light);
    font-family: variables.$primaryFontFamily;
    background-color: $bg;
    font-size: 12px;
    border: 0px;

    ///Borders
    &:focus-visible {
      outline-style: solid;
      outline-width: 0px;
      outline-color: map-get(colors.$input-colors, $name);
      transition: outline 0s;


    }


    &:hover {}
  }
}



@each $name,
$bg in colors.$dark-input-colors {
  .dark .input--#{$name} {

    color: map-get(colors.$text-colors, strong-light);


    ///BACKGROUND COLORS
    @if (str-index($name, "danger-outline")) {
      color: map-get(colors.$text-colors, danger);
    }

    background-color: $bg;


    &:focus-visible {}

    &:hover {
      background-color: map-get(colors.$dark-button-hover-colors, $name);

      @if (str-index($name, "danger-outline")) {
        color: map-get(colors.$text-colors, strong-light);
      }


      @if (str-index($name, "ghost")) {
        text-decoration: underline;
        background-color: map-get(colors.$dark-button-hover-colors, ghost);
        ;
      }
    }
  }
}

.active {
  transform: rotate(-180deg);
}

.dropdown {
  background-color: black;
  transition: transform 0.15s ease-in-out;
}

.iconWrapper{
  margin-left:10px;
  align-self: center;
  background-color: colors.$primary-300;
  display: flex;
  justify-content: center;
  align-items: center;
  height:14px;
  width:14px;
}

.dark {
  .dropdown {
    background-color: white;
  }
}

.topWrapper svg{
  color:white;
  background-color: transparent;
}


@each $name,
$bg in colors.$disabled {

  // TEXT FORMATTING
  .input--#{$name}.disabled {
    pointer-events: none;
    background-color: map-get(colors.$disabled, $name);
    color: map-get(colors.$disabled-text-colors, $name);
    text-decoration: none;

    input {
      pointer-events: none;
    }


    // BORDER EXCEPTIONS
    @if (str-index($name, "danger-outline")) {
      outline-color: map-get(colors.$disabled-text-colors, $name);
      outline-style: solid;
      outline-width: 1px;
      text-decoration: none;
    }

    @if (str-index($name, "secondary")) {
      outline-color: map-get(colors.$disabled-text-colors, $name);
      outline-style: solid;
      outline-width: 1px;
      text-decoration: none;
    }



    &:focus-visible {
      background-color: map-get(colors.$disabled, $name);
      outline-color: map-get(colors.$disabled, $name);
      pointer-events: none;
      color: map-get(colors.$disabled-text-colors, $name);
      outline-width: 1px;
    }
  }
}

@each $name,
$bg in colors.$disabled {

  // BORDER FORMAT DARK MODE
  .dark .button--#{$name}.disabled {

    background-color: map-get(colors.$dark-disabled, $name);
    outline-color: map-get(colors.$disabled-text-colors, $name);
    color: map-get(colors.$disabled-text-colors, $name);
    text-decoration: none;

    // BORDER EXCEPTIONS
    @if (str-index($name, "primary")) {
      outline-color: map-get(colors.$disabled-text-colors, $name);
      outline-style: solid;
      outline-width: 1px;
      text-decoration: none;
    }

    &:focus-visible {}


  }
}

